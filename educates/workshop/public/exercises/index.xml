<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exercises on </title>
    <link>http://localhost:1313/workshop/content/exercises/</link>
    <description>Recent content in Exercises on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/workshop/content/exercises/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>App</title>
      <link>http://localhost:1313/workshop/content/exercises/06-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/06-app/</guid>
      <description>&lt;p&gt;What did we just build ?&lt;/p&gt;&#xA;&lt;p&gt;The app we will be using today, is a simple one page website.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s located in the &lt;code&gt;app&lt;/code&gt; folder, under &lt;code&gt;html&lt;/code&gt; and there is also a Dockerfile, that we use to package the app.&lt;/p&gt;&#xA;&lt;p&gt;The dockerfile simply contains&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;FROM nginx:1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;COPY ./html /usr/share/nginx/html&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And all it does, is to use the Nginx image, and copy the local html folder, to the html folder in the container, so Nginx can publish it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ArgoCD</title>
      <link>http://localhost:1313/workshop/content/exercises/07-argocd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/07-argocd/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;argocd_logo&#34;&gt;&#xA;For CD (Continus Deployment) we will be using &lt;a href=&#34;https://argoproj.github.io/cd/&#34;&gt;ArgoCD&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;ArgoCD is one of the major solutions for doing CD.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s often compared with &lt;a href=&#34;https://fluxcd.io&#34;&gt;Flux&lt;/a&gt; and both products have a lot of overlapping features.&lt;/p&gt;&#xA;&lt;p&gt;One of the major reasons for using Argo in this workshop, is that ArgoCD has a nice UI, where we can see the changes that we are doing.&lt;/p&gt;&#xA;&lt;p&gt;ArgoCD is already installed, in our Kubernetes cluster, but to access it, we first need to get a password.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CD Setup</title>
      <link>http://localhost:1313/workshop/content/exercises/08-cd-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/08-cd-setup/</guid>
      <description>&lt;p&gt;Now that we got ArgoCD working, let&amp;rsquo;s setup the CD, so we can start to deploy our app.&lt;/p&gt;&#xA;&lt;p&gt;The first thing we need to do, is to give ArgoCD access to our git repository.&lt;/p&gt;&#xA;&lt;p&gt;It can be done usig UI, CLI or yaml.&lt;/p&gt;&#xA;&lt;p&gt;We will chose the last one.&lt;/p&gt;&#xA;&lt;p&gt;Take a look at the argocd-repo.yaml file you have in your exercise folder.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-editor:open-file&#34; data-lang=&#34;editor:open-file&#34;&gt;title: Open argocd-repo.yaml&#xA;file: ~/exercises/argocd-repo.yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It should look something like this&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI - Dagger</title>
      <link>http://localhost:1313/workshop/content/exercises/03-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/03-ci/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;dagger-logo.png&#34; alt=&#34;dagger&#34;&gt;&#xA;For this workshop, we are using &lt;a href=&#34;https://dagger.io&#34;&gt;Dagger&lt;/a&gt; as our CI tool.&lt;/p&gt;&#xA;&lt;p&gt;There are many options out there, each with their own pro&amp;rsquo;s and cons.&lt;/p&gt;&#xA;&lt;p&gt;Dagger works by creating pipelines as code, and running it in containers.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s big strength is that you can run and test it local and remote, and get the same results.&lt;/p&gt;&#xA;&lt;p&gt;This is usefull in our enviroment, where we have some restrictions, compared to a &amp;ldquo;real&amp;rdquo; enviroment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI - Makefile</title>
      <link>http://localhost:1313/workshop/content/exercises/05-ci-makefile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/05-ci-makefile/</guid>
      <description>&lt;p&gt;To run the pipelines/functions we need to use the dagger cli, with a lot of options, for the variable inputs, that each function requires.&lt;/p&gt;&#xA;&lt;p&gt;To make this easier, we are utilizing &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Makefiles&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Makefiles, is a lot easier, than remembering the correct syntax for a command or a job, and you will often find them in the root, of projects, on Github etc.&lt;/p&gt;&#xA;&lt;p&gt;They simply require you to have make installed, and to have a &lt;code&gt;Makefile&lt;/code&gt; in the current directory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI - Setup</title>
      <link>http://localhost:1313/workshop/content/exercises/04-ci-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/04-ci-setup/</guid>
      <description>&lt;p&gt;Dagger cli is already installed in your enviroment.&lt;/p&gt;&#xA;&lt;p&gt;The pipelines are all defines in the &lt;code&gt;dagger&lt;/code&gt; directory under your &lt;code&gt;app&lt;/code&gt; directory.&lt;/p&gt;&#xA;&lt;p&gt;For this workshop, we won&amp;rsquo;t setup pipelines etc. We will just use the ones, that are already created.&lt;/p&gt;&#xA;&lt;p&gt;Dagger works by creating functions we can call.&lt;/p&gt;&#xA;&lt;p&gt;in &lt;code&gt;app/dagger/src/main/__init__.py&lt;/code&gt; you will find the functions, written in Python.&lt;/p&gt;&#xA;&lt;p&gt;The code is written in Python and looks like this :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Annotated&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dagger&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dagger &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Doc, dag, function, object_type&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_type&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image_url: str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        src: Annotated[&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dagger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Directory,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Doc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location of directory containing Dockerfile&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; str:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Build and publish image from existing Dockerfile&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;container()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_directory(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/src&amp;#34;&lt;/span&gt;, src)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_workdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/src&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;directory(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/src&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;docker_build()  &lt;span style=&#34;color:#75715e&#34;&gt;# build from Dockerfile&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ttl.sh/my-awesome-app&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; image_url&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(self, repo: str, branch: str, deploy_filepath: str, image_url: str, git_user: str, git_email: str, git_password: dagger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Secret, force_with_lease: bool) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Update deployment file, with image name and version&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;image_updater()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(repo, branch, deploy_filepath, image_url, git_user, git_email, git_password, force_with_lease)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deploy&lt;/span&gt;(self, src: Annotated[&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dagger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Directory,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Doc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location of directory containing Dockerfile&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            repo: str, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            branch: str,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            deploy_filepath: str, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            image_url: str,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            git_user: str, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            git_email: str, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            git_password: dagger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Secret, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            force_with_lease: bool) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; str:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build(src))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(repo, branch, deploy_filepath, image_url, git_user, git_email, git_password, force_with_lease)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Create and push container image, and update deployment file, with the new image name and tag&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; image_url&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It contains 3 functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flow</title>
      <link>http://localhost:1313/workshop/content/exercises/01-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/01-flow/</guid>
      <description>&lt;p&gt;The flow we will be going thru today, looks like this.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s split up, into Continuous Integrations (CI) and Continuous Delivery (CD), with Git in the Center as the &amp;ldquo;Source of truth&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;flow.png&#34; alt=&#34;Flow&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The flow is (normalily) triggered by a commit to Git, that updates the code or container, or deployment configuration.&lt;/p&gt;&#xA;&lt;p&gt;Depending on which, a flow will be triggered automatic, that will end up with a new version of the application being deployed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Repository</title>
      <link>http://localhost:1313/workshop/content/exercises/02-repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/02-repository/</guid>
      <description>&lt;p&gt;Since the &amp;ldquo;Source of truth&amp;rdquo; is a Git repository, we will start by initializing a repo, comitting our code, and pushing it to a new repository.&lt;/p&gt;&#xA;&lt;p&gt;We already have all we need in the &lt;code&gt;app&lt;/code&gt; folder, so we will use that one.&lt;/p&gt;&#xA;&lt;p&gt;This is done, by running the commands below.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal:execute&#34; data-lang=&#34;terminal:execute&#34;&gt;prefix: Run&#xA;title: Add folder to Git Repository&#xA;command: |&#xA;  cd ~/exercises/app&#xA;  git init&#xA;  git remote add origin http://$GIT_HOST/myapp.git&#xA;  git add .&#xA;  git commit -m &amp;#34;first commit&amp;#34;&#xA;  git push -u -f origin main&#xA;  cd ..&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to see the new source location, then just run&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scale App</title>
      <link>http://localhost:1313/workshop/content/exercises/10-scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/10-scale/</guid>
      <description>&lt;p&gt;In our K8S folder, under App, we have 3 files.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[~/exercises/app/k8s] $ tree&#xA;.&#xA;├── deployment.yaml&#xA;├── ingress.yaml&#xA;└── service.yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These 3 files, contain the deployment info, that Kubernetes need, and it&amp;rsquo;s what ArgoCD looks at, for changes.&lt;/p&gt;&#xA;&lt;p&gt;Just as we can update our application, and deploy it automatic. We can also update our deployment, and let ArgoCD handle it.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say we want to have 2 pods running, wíth our application, for failover instead of just one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Temp</title>
      <link>http://localhost:1313/workshop/content/exercises/99-temp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/99-temp/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-dashboard:reload-dashboard&#34; data-lang=&#34;dashboard:reload-dashboard&#34;&gt;prefix: Open&#xA;title: Open ArgoCD&#xA;name: ArgoCD&#xA;url: http://argocd-educates-cli-w06-s001.192.168.50.207.nip.io&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal:execute&#34; data-lang=&#34;terminal:execute&#34;&gt;prefix: Run&#xA;title: Get ArgoCD password from secret&#xA;command: |&#xA;    ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&amp;#34;{.data.password}&amp;#34; | base64 -d)&#xA;    echo $ARGOCD_PASSWORD&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-execute-2&#34; data-lang=&#34;execute-2&#34;&gt;k get pods -w -A&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-execute-2&#34; data-lang=&#34;execute-2&#34;&gt;&amp;lt;ctrl+c&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Update App</title>
      <link>http://localhost:1313/workshop/content/exercises/09-update-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/09-update-app/</guid>
      <description>&lt;p&gt;Now that we have a working application, let&amp;rsquo;s try to change it a bit, and see the deployment work.&lt;/p&gt;&#xA;&lt;p&gt;Start by opening index.html your editor.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-editor:open-file&#34; data-lang=&#34;editor:open-file&#34;&gt;title: Open index.html&#xA;file: ~/exercises/app/html/index.html&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On line 18, you should find the following line&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;img class=&amp;#34;img-fluid pr-3 aa-logo-img&amp;#34; src=&amp;#34;images/logo.png&amp;#34; alt=&amp;#34;logo&amp;#34;&amp;gt;&amp;lt;a class=&amp;#34;navbar-brand px-0 py-0&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;Awesome CICD App&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace awesome with your name, so it says&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;img class=&amp;#34;img-fluid pr-3 aa-logo-img&amp;#34; src=&amp;#34;images/logo.png&amp;#34; alt=&amp;#34;logo&amp;#34;&amp;gt;&amp;lt;a class=&amp;#34;navbar-brand px-0 py-0&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;Robert&amp;#39;s CICD App&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save the file, and open the source control icon, that should now have a 1 on it.&#xA;&lt;img src=&#34;icon.png&#34; alt=&#34;icon&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Workshop Overview</title>
      <link>http://localhost:1313/workshop/content/exercises/00-workshop-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/workshop/content/exercises/00-workshop-overview/</guid>
      <description>&lt;p&gt;In this hands-on session, you&amp;rsquo;ll learn how to harness the power of Continuous Integrations (CI) and Continuous Delivery (CD) to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Understand the fundamentals of CI/CD and its benefits&lt;/li&gt;&#xA;&lt;li&gt;Master the art of automating your build and deployment processes&lt;/li&gt;&#xA;&lt;li&gt;Learn how to seamlessly integrate your applications with Kubernetes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the end of this workshop, you&amp;rsquo;ll be equipped with the skills to revolutionize your development workflow, reduce errors, and increase efficiency.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;cicd.svg&#34; alt=&#34;CICD&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
